receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
exporters:
  logging:
  debug:
  otlp/tempo:
    endpoint: tempo:4317
    tls:
      insecure: true
  # exporter to datadog agent using otlp protocol
  # otlp/datadog:
  #   endpoint: dd-agent:4317
  #   tls:
  #     insecure: true
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
  prometheus:
    endpoint: 0.0.0.0:8889
    # adding labels to the metrics
    # const_labels:
    #   src: shopware
    resource_to_telemetry_conversion:
      enabled: true
    send_timestamps: false
    metric_expiration: 180m
  # exporter to datadog using datadog api
  # for configuration example see https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/datadogexporter/examples/collector.yaml
  datadog:
    api:
      site: ${env:DD_SITE}
      key: ${env:DD_API_KEY}
    metrics:
      resource_attributes_as_tags: true
      histograms:
        mode: counters
        send_aggregation_metrics: true
    traces:
      # trace_buffer: 10

processors:
  batch:
  deltatocumulative:
    max_stale: 60m
    max_streams: 0


service:
  telemetry:
    logs:
      level: "debug"
  pipelines:
    traces:
      receivers: [otlp]
      # if you want to export through datadog agent, not to api directly, use otlp/datadog instead of datadog
      # in such case otlp/datadog exporter have to be enabled in exporters section
      exporters: [otlp/tempo, debug, datadog]
    logs:
      receivers: [otlp]
      exporters: [loki, logging]
    metrics/delta:
      receivers: [otlp]
      # if you want to export through datadog agent, not to api directly, use otlp/datadog instead of datadog
      # in such case otlp/datadog exporter have to be enabled in exporters section
      exporters: [debug, datadog]
    metrics/cumulative:
      receivers: [otlp]
      processors: [deltatocumulative]
      exporters: [prometheus]
